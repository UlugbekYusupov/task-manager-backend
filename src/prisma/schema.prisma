// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  password      String
  role          String       @default("user")
  tasks         Task[]
  invitations   Invitation[]
  projects      Project[]    @relation("UserProjects")
  ownedProjects Project[]    @relation(name: "ProjectOwner")
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String?
  status      IssueStatus   @default(OPEN)
  type        TaskType      @default(STORY)
  priority    PriorityLevel @default(MEDIUM)
  assignedTo  User?         @relation(fields: [userId], references: [id])
  userId      String?
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  createdAt   DateTime      @default(now())
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String        @default("No description")
  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id], name: "ProjectOwner")
  members     User[]        @relation("UserProjects")
  tasks       Task[]
  invitations Invitation[]
  createdAt   DateTime      @default(now())
  status      ProjectStatus @default(ACTIVE)
}

model Invitation {
  id        String           @id @default(uuid())
  email     String
  projectId String
  project   Project          @relation(fields: [projectId], references: [id])
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  User      User?            @relation(fields: [userId], references: [id])
  userId    String?
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TaskType {
  BUG
  STORY
}

enum IssueStatus {
  OPEN
  TEST
  IN_PROGRESS
  DONE
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
}
